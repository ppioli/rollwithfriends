import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { createOptimisticEntityAdapter, Update } from "utils/entities";
import Token from "features/token/Token.model";
import { AppState, AppThunk } from "store";
import { Create, EntityId } from "utils/entities/models";
import { sleep } from "utils/utils";

const tokenAdapter = createOptimisticEntityAdapter<Token>();

let currentId = 0;

const initialState = tokenAdapter.getInitialState();

export const tokenSlice = createSlice({
  name: "token",
  initialState,
  reducers: {
    removeToken: tokenAdapter.removeOne,
    updateToken: tokenAdapter.updateOne,
    commit: tokenAdapter.commit,
    revert: tokenAdapter.revert,
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(addToken.fulfilled, tokenAdapter.addOne);
  },
});

// Export the customized selectors for this adapter using `getSelectors`
export const {
  selectAll: selectAllTokens,
  selectById: selectTokenById,
  selectIds: selectTokenIds,
  // Pass in a selector that returns the posts slice of state
} = tokenAdapter.getSelectors((state: AppState) => state.token);

export const { removeToken } = tokenSlice.actions;

export const addToken = createAsyncThunk(
  "token/add",
  async (token: Omit<Token, "id">) => {
    const timestamp = new Date().toISOString();

    await sleep(300);

    return Promise.resolve({
      timestamp,
      entity: { id: ++currentId, ...token },
    });
  }
);
let count = 0;
export const updateToken =
  ({ entity, id }: { entity: Token; id: EntityId }): AppThunk =>
  async (dispatch) => {
    const timestamp = new Date().toISOString();
    dispatch(tokenSlice.actions.updateToken({ entity, id, timestamp }));
    await sleep(1000);
    if (count % 2 === 0) {
      dispatch(tokenSlice.actions.commit({ entity, id, timestamp }));
    } else {
      console.error("Server rejected update");
      dispatch(tokenSlice.actions.revert({ entity, id, timestamp }));
    }
    count++;
  };

// export const selectPostsByUser = createSelector(
//     [selectAllPosts, (state, userId) => userId],
//     (posts, userId) => posts.filter(post => post.user === userId)
// )

export default tokenSlice.reducer;
