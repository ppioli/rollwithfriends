schema {
  query: RootQuery
  mutation: Mutation
  subscription: Subscription
}

"""
The `@defer` directive may be provided for fragment spreads and inline fragments
to inform the executor to delay the execution of the current fragment to
indicate deprioritization of the current fragment. A query with `@defer`
directive will cause the request to potentially return multiple responses, where
non-deferred data is delivered in the initial response and data deferred is
delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`.
"""
directive @defer(
  """
  If this argument label has a value other than null, it will be passed on to
  the result of this defer directive. This label is intended to give client
  applications a way to identify to which fragment a deferred result belongs to.
  """
  label: String

  """Deferred when true."""
  if: Boolean
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
The `@stream` directive may be provided for a field of `List` type so that the
backend can leverage technology such as asynchronous iterators to provide a
partial list in the initial response, and additional list items in subsequent
responses. `@include` and `@skip` take precedence over `@stream`.
"""
directive @stream(
  """
  If this argument label has a value other than null, it will be passed on to
  the result of this stream directive. This label is intended to give client
  applications a way to identify to which fragment a streamed result belongs to.
  """
  label: String

  """The initial elements that shall be send down to the consumer."""
  initialCount: Int! = 0

  """Streamed when true."""
  if: Boolean
) on FIELD

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
}

type Campaign {
  id: ID!
  name: String!
  description: String!
  scenes: [Scene!]!
  selectedScene: Scene
  selectedSceneId: Int
  participants: [CampaignEnrollment!]!
}

input CampaignAddInput {
  name: String!
  description: String!
}

type CampaignAddPayload {
  campaign: Campaign
}

type CampaignEnrollment implements Node {
  id: ID!
  userId: String!
  rol: Rol!
  campaign: Campaign!
  campaignId: Int!
}

input CampaignEnrollmentFilterInput {
  and: [CampaignEnrollmentFilterInput!]
  or: [CampaignEnrollmentFilterInput!]
  id: IdOperationFilterInput
  userId: StringOperationFilterInput
  rol: RolOperationFilterInput
  campaign: CampaignFilterInput
  campaignId: ComparableInt32OperationFilterInput
}

input CampaignFilterInput {
  and: [CampaignFilterInput!]
  or: [CampaignFilterInput!]
  id: IdOperationFilterInput
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  scenes: ListFilterInputTypeOfSceneFilterInput
  selectedScene: SceneFilterInput
  selectedSceneId: ComparableNullableOfInt32OperationFilterInput
  participants: ListFilterInputTypeOfCampaignEnrollmentFilterInput
}

input ComparableInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input ComparableNullableOfInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input EnrollmentAddInput {
  campaignId: ID!
}

type EnrollmentAddPayload {
  campaign: Campaign
}

input IdOperationFilterInput {
  eq: ID
  neq: ID
  in: [ID]
  nin: [ID]
}

input ListFilterInputTypeOfCampaignEnrollmentFilterInput {
  all: CampaignEnrollmentFilterInput
  none: CampaignEnrollmentFilterInput
  some: CampaignEnrollmentFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMapEntityFilterInput {
  all: MapEntityFilterInput
  none: MapEntityFilterInput
  some: MapEntityFilterInput
  any: Boolean
}

input ListFilterInputTypeOfSceneFilterInput {
  all: SceneFilterInput
  none: SceneFilterInput
  some: SceneFilterInput
  any: Boolean
}

type MapEntity implements Node {
  id: ID!
  x: Int!
  y: Int!
  width: Int!
  height: Int!
  scene: Scene!
  sceneId: Int!
}

input MapEntityAddInput {
  x: Int!
  y: Int!
  width: Int!
  height: Int!
}

type MapEntityAddPayload {
  mapEntity: MapEntity
}

type MapEntityChangeEvent {
  type: MapEntityChangeEventType!
}

enum MapEntityChangeEventType {
  ADDED
  UPDATED
  DELETED
}

input MapEntityDeleteInput {
  id: ID!
}

type MapEntityDeletePayload {
  mapEntity: MapEntity
}

input MapEntityFilterInput {
  and: [MapEntityFilterInput!]
  or: [MapEntityFilterInput!]
  id: IdOperationFilterInput
  x: ComparableInt32OperationFilterInput
  y: ComparableInt32OperationFilterInput
  width: ComparableInt32OperationFilterInput
  height: ComparableInt32OperationFilterInput
  scene: SceneFilterInput
  sceneId: ComparableInt32OperationFilterInput
}

input MapEntityUpdateInput {
  id: ID!
  x: Int!
  y: Int!
  width: Int!
  height: Int!
}

type MapEntityUpdatePayload {
  mapEntity: MapEntity
}

type Mutation {
  campaignAdd(input: CampaignAddInput!): CampaignAddPayload!
  enrollmentAdd(input: EnrollmentAddInput!): EnrollmentAddPayload!
  mapEntityUpdate(input: MapEntityUpdateInput!): MapEntityUpdatePayload!
  mapEntityAdd(input: MapEntityAddInput!): MapEntityAddPayload!
  mapEntityDelete(input: MapEntityDeleteInput!): MapEntityDeletePayload!
}

"""
The node interface is implemented by entities that have a global unique identifier.
"""
interface Node {
  id: ID!
}

enum Rol {
  DUNGEON_MASTER
  PLAYER
}

input RolOperationFilterInput {
  eq: Rol
  neq: Rol
  in: [Rol!]
  nin: [Rol!]
}

type RootQuery {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  campaigns(where: CampaignFilterInput): [Campaign!]!
}

type Scene implements Node {
  id: ID!
  name: String!
  campaign: Campaign!
  campaignId: Int!
  entities: [MapEntity!]!
}

input SceneFilterInput {
  and: [SceneFilterInput!]
  or: [SceneFilterInput!]
  id: IdOperationFilterInput
  name: StringOperationFilterInput
  campaign: CampaignFilterInput
  campaignId: ComparableInt32OperationFilterInput
  entities: ListFilterInputTypeOfMapEntityFilterInput
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

type Subscription {
  mapEntitySubscription: MapEntityChangeEvent!
}

